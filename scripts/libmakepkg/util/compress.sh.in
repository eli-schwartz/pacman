#!/bin/bash
#
#   compress.sh - functions to compress archives in a uniform manner
#
#   Copyright (c) 2017-2018 Pacman Development Team <pacman-dev@archlinux.org>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

[[ -n "$LIBMAKEPKG_UTIL_COMPRESS_SH" ]] && return
LIBMAKEPKG_UTIL_COMPRESS_SH=1

LIBRARY=${LIBRARY:-'@libmakepkgdir@'}

source "$LIBRARY/util/message.sh"
source "$LIBRARY/util/pkgbuild.sh"


# Wrapper around many stream compression formats, for use in the middle of a
# pipeline. A tar archive is passed on stdin and compressed to stdout.
compress_as() {
	# $1: final archive filename extension for compression type detection

	local trim=${1%.tar*}
	local ext=${1##$trim}
	local cmd

	get_compression_command "$ext" cmd

	if (( ! ${#cmd[@]} )); then
		warning "$(gettext "'%s' is not a valid archive extension.")" "$ext"
		cat
	else
		"${cmd[@]}"
	fi
}

# Check if compression format is valid for compress_as usage.
can_compress_as() {
	# $1: final archive filename extension for compression type detection

	local trim=${1%.tar*}
	local ext=${1##$trim}
	local cmd

	get_compression_command "$ext" cmd
}

# Retrieve the compression command for an archive extension, or cat for .tar,
# and save it to an existing array name. If the extension cannot be found,
# clear the array and return failure.
get_compression_command() {
	# $1: final archive filename extension for compression type detection
	# $2: array variable to save command

	local c=() ext=$1 outputvar=$2

	case "$ext" in
		.tar.gz)  c=("${COMPRESSGZ[@]}");  (( ${#c[@]} )) || c=(-gzip -c -f -n) ;;
		.tar.bz2) c=("${COMPRESSBZ2[@]}"); (( ${#c[@]} )) || c=(bzip2 -c -f) ;;
		.tar.xz)  c=("${COMPRESSXZ[@]}");  (( ${#c[@]} )) || c=(xz -c -z -) ;;
		.tar.zst) c=("${COMPRESSZST[@]}"); (( ${#c[@]} )) || c=(zstd -c -z -q -) ;;
		.tar.lrz) c=("${COMPRESSLRZ[@]}"); (( ${#c[@]} )) || c=(lrzip -q) ;;
		.tar.lzo) c=("${COMPRESSLZO[@]}"); (( ${#c[@]} )) || c=(lzop -q) ;;
		.tar.Z)   c=("${COMPRESSZ[@]}");   (( ${#c[@]} )) || c=(compress -c -f) ;;
		.tar.lz4) c=("${COMPRESSLZ4[@]}"); (( ${#c[@]} )) || c=(lz4 -q) ;;
		.tar.lz)  c=("${COMPRESSLZ[@]}");  (( ${#c[@]} )) || c=(lzip -c -f) ;;
		.tar)     c=(cat) ;;
	esac

	array_build "$outputvar" c
	(( ${#c[@]} ))
}
